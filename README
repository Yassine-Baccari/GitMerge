Git Merge vs Git Rebase: A Step-by-Step Lab

=============

Objective

Understand the difference between git merge and git rebase by following a practical hands-on example.

=============

Setup

Ensure Git is installed and configured. Open a terminal and run:

mkdir git-lab && cd git-lab
git init


Create an initial commit:

echo "Initial commit" > file.txt
cat file.txt
git add file.txt
git commit -m "Initial commit"
git log --oneline --graph --all

Create a new branch:

git checkout -b feature-branch
echo "Feature 1" >> file.txt
cat file.txt
git add file.txt
git commit -m "Add Feature 1"
git log --oneline --graph --all

Switch back to master and create another commit:

git checkout master
echo "Master update" >> file.txt
cat file.txt
git add file.txt
git commit -m "Master branch update"
git log --oneline --graph --all

=============

1. Git Merge

git checkout master
git merge feature-branch

If a merge conflict occurs: Handling Merge Conflicts:

git status
# Manually resolve conflicts in the conflicted files
git add <resolved-files>
git commit -m "Resolve merge conflict"

git log --oneline --graph --all

Result: A merge commit is created, preserving both branch histories.

=============

